*&---------------------------------------------------------------------*
*& INCLUDE Z_CUST_CREDIT_FORM
*&---------------------------------------------------------------------*
*& Purpose: Contains all logical blocks and subroutines (PERFORM).
*& Topics Used: DATABASE, JOINS, LOOPS, MODULARIZATION (Subroutines), FUNCTION MODULES
*&---------------------------------------------------------------------*

*----------------------------------------------------------------------*
* Subroutine 1: Fetch and Process Data (JOINS, LOOPS)
*----------------------------------------------------------------------*
FORM fetch_customer_data.

  * 1. DATABASE ACCESS: SELECT with INNER JOIN
  * Joining KNA1 (Customer General) and KNB1 (Customer Company Code)
  SELECT a~kunnr     " KNA1 fields (General Data)
         a~name1
         a~ort01
         a~land1
         b~bukrs     " KNB1 fields (Company Code Data)
         b~klimg
    INTO CORRESPONDING FIELDS OF TABLE gt_cust_data  " Populates Internal Table
    FROM kna1 AS a
    INNER JOIN knb1 AS b
      ON a~kunnr = b~kunnr                         " The simple JOIN condition (on Customer Number)
    WHERE b~bukrs = p_bukrs                        " Filter by Parameter (Company Code)
      AND a~kunnr IN s_kunnr.                      " Filter by Select-Option (range)

  IF sy-subrc <> 0.
    MESSAGE 'No Customer Data found matching the selection criteria.' TYPE 'I'.
    EXIT.
  ENDIF.

  * 2. LOOPS: Process Data and Set Custom Status
  LOOP AT gt_cust_data INTO gs_cust_data.

    * Logic to set a custom status based on the Credit Limit (KLIMG)
    IF gs_cust_data-klimg > 100000.
      gs_cust_data-kredit = 'High Credit Risk'.
    ELSEIF gs_cust_data-klimg > 50000.
      gs_cust_data-kredit = 'Standard Credit'.
    ELSE.
      gs_cust_data-kredit = 'Low Credit Limit'.
    ENDIF.

    * Update the internal table with the processed status
    MODIFY gt_cust_data FROM gs_cust_data.
  ENDLOOP.

ENDFORM. " fetch_customer_data

*----------------------------------------------------------------------*
* Subroutine 2: Display ALV Grid (FUNCTION MODULES)
*----------------------------------------------------------------------*
FORM display_customer_alv.

  IF gt_cust_data IS INITIAL.
    EXIT.
  ENDIF.

  * 1. Prepare Parameters
  gv_repid = sy-repid.
  gs_layout-zebra = 'X'. " Enable striped rows

  * 2. Call the ALV FUNCTION MODULE
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program = gv_repid
      is_layout          = gs_layout
    TABLES
      t_outtab           = gt_cust_data        " Passing the Internal Table for display
    EXCEPTIONS
      program_error      = 1
      others             = 2.

  IF sy-subrc <> 0.
    MESSAGE 'Error calling ALV Function Module.' TYPE 'E'.
  ENDIF.

ENDFORM. " display_customer_alv
